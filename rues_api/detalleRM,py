import json
import base64
import requests
from Crypto.Cipher import AES
from Crypto.Hash import MD5
from Crypto.Random import get_random_bytes

URL = "https://elasticprd.rues.org.co/api/Expediente/DetalleRM"
PASSPHRASE = "ac1244b5-8bee-47b2-a4a5-924a748d907f"  # misma passphrase del front

# --------- Utilidades de cifrado compatibles con CryptoJS ----------
def pkcs7_pad(data: bytes, block_size: int = 16) -> bytes:
    pad_len = block_size - (len(data) % block_size)
    return data + bytes([pad_len] * pad_len)

def evp_bytes_to_key(passphrase: bytes, salt: bytes, key_len: int = 32, iv_len: int = 16):
    d = b""
    prev = b""
    while len(d) < key_len + iv_len:
        prev = MD5.new(prev + passphrase + salt).digest()
        d += prev
    return d[:key_len], d[key_len:key_len+iv_len]

def cryptojs_aes_encrypt(plaintext_json: dict, passphrase: str) -> str:
    raw = json.dumps(plaintext_json, separators=(",", ":"), ensure_ascii=False).encode("utf-8")
    salt = get_random_bytes(8)               # 8 bytes de salt
    key, iv = evp_bytes_to_key(passphrase.encode("utf-8"), salt)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    ct = cipher.encrypt(pkcs7_pad(raw, 16))
    blob = b"Salted__" + salt + ct           # encabezado OpenSSL
    return base64.b64encode(blob).decode("utf-8")
# -------------------------------------------------------------------

def detalle_rm(payload: dict, timeout: int = 30):
    """Cifra el payload y hace POST a /api/Expediente/DetalleRM"""
    data_body = cryptojs_aes_encrypt(payload, PASSPHRASE)

    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json, text/plain, */*",
        "Origin": "https://www.rues.org.co",
        "App-Name": "RuesFront",
    }

    resp = requests.post(URL, json={"dataBody": data_body}, headers=headers, timeout=timeout)

    # Diagnóstico útil si algo falla
    try:
        resp.raise_for_status()
    except requests.HTTPError as e:
        print("HTTP error:", e, "| status:", resp.status_code)
        print("Respuesta (primeros 1000 chars):", resp.text[:1000])
        raise

    # Devuelve JSON del backend (expediente, actos, establecimientos, etc.)
    try:
        return resp.json()
    except requests.JSONDecodeError:
        print("Contenido no-JSON recibido. Status:", resp.status_code)
        print("Headers:", resp.headers)
        print("Body (primeros 1000 chars):", resp.text[:1000])
        raise

if __name__ == "__main__":
    # Payload que pediste (tal cual)
    payload = {
        "Razon": None,
        "Nit": 890926803,
        "Dpto": None,
        "Cod_Camara": None,
        "Matricula": None
    }

    data = detalle_rm(payload)
    print(json.dumps(data, indent=2, ensure_ascii=False))
